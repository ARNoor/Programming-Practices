class Trie {
    struct TRIE{
        TRIE* next[26];
        bool isEnd;
        TRIE(){
            for(int i=0; i<26; ++i)
                next[i] = NULL;
            isEnd = false;
        }
    };
    
    public:
    TRIE* root;

    Trie() {
        root = new TRIE();
    }
    
    void insert(string word) {
        TRIE* curr = root;
        for(int i=0; i<word.size(); ++i){
            if(curr->next[word[i]-'a'] == NULL)
                curr->next[word[i]-'a'] = new TRIE();
            curr = curr->next[word[i]-'a'];
        }
        curr->isEnd = true;
    }
    
    bool search(string word) {
        TRIE* curr = root;
        for(int i=0; i<word.size(); ++i){
            if(curr->next[word[i]-'a'] == NULL)
                return false;
            curr = curr->next[word[i]-'a'];
        }
        return curr->isEnd;
    }
    
    bool startsWith(string prefix) {
        TRIE* curr = root;
        for(int i=0; i<prefix.size(); ++i){
            if(curr->next[prefix[i]-'a'] == NULL)
                return false;
            curr = curr->next[prefix[i]-'a'];
        }
        return true;
    }  
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */
